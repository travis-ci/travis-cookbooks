from __future__ import print_function
import json
import os
import urllib

import collectd

DOCKER_HOST = os.environ.get('DOCKER_HOST', 'tcp://127.0.0.1:4243')


def _in_kb(measure, unit):
    measure = float(measure)

    return {
        'KB': lambda: measure,
        'MB': lambda: measure * 1024.0,
        'GB': lambda: measure * 1024.0 * 1024.0,
        'TB': lambda: measure * 1024.0 * 1024.0 * 1024.0,
    }[unit]()


def _read_pct_data_used(host=DOCKER_HOST):
    """
    NOTE: This is a fairly naive implementation, as it assumes:
    * the docker daemon is not using certificate auth
    * the data space unit for the total is in GB
    * the possible units for data space used are KB, MB, or GB
    """
    info = json.load(
        urllib.urlopen('{}/info'.format(host.replace('tcp://', 'http://')))
    )

    driver_status = dict(info['DriverStatus'])
    for key, value in driver_status.items():
        driver_status[key.lower().replace(' ', '_')] = value

    data_total = _in_kb(*driver_status['data_space_total'].upper().split())
    data_used = _in_kb(*driver_status['data_space_used'].upper().split())

    return data_used / data_total


def read(data=None):
    val = collectd.Values(type='gauge')
    val.plugin = 'docker_lvm.data_pct_used'
    val.dispatch(values=[_read_pct_data_used()])


def write(val, data=None):
    for value in val.values:
        print('{} ({}): {}'.format(val.plugin, val.type, value))


def config(cfg):
    """
    Dummy config func needed as the configs generated by the collectd chef
    cookbook always include a config section yay.
    """
    pass


collectd.register_read(read)
collectd.register_write(write)
collectd.register_config(config)
