#! /bin/sh

### BEGIN INIT INFO
# Provides:          cassandra
# Required-Start:    $remote_fs $network $named $time
# Required-Stop:     $remote_fs $network $named $time
# Should-Start:      ntp mdadm
# Should-Stop:       ntp mdadm
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: distributed storage system for structured data
# Description:       Cassandra is a distributed (peer-to-peer) system for
#                    the management and storage of structured data.
### END INIT INFO

DESC="Cassandra"
NAME=cassandra
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
CASSANDRA_HOME=<%= node.cassandra.installation_dir %>
CASSANDRA_CONF=<%= node.cassandra.conf_dir %>
USER=<%= node.cassandra.user %>
GROUP=<%= node.cassandra.user %>
WAIT_FOR_START=10
FD_LIMIT=100000

[ -e $CASSANDRA_HOME/lib/apache-cassandra-<%= node.cassandra.version %>.jar ] || exit 0
[ -e $CASSANDRA_CONF/cassandra.yaml ] || exit 0
[ -e $CASSANDRA_CONF/cassandra-env.sh ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Return
#   0 if daemon is running
#   1 if daemon is not running
is_running()
{
    [ -f $PIDFILE -a -d /proc/$(cat $PIDFILE) ] && return 0
    return 1
}

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start()
{
    is_running && return 1

    ulimit -l unlimited
    ulimit -n "$FD_LIMIT"

    touch $PIDFILE
    chown $USER:$GROUP $PIDFILE

    start-stop-daemon --start \
        --quiet \
        --oknodo \
        --chdir / \
        --oknodo \
        --chuid $USER:$GROUP \
        --exec /bin/bash \
        --pidfile $PIDFILE \
        -- -c "$CASSANDRA_HOME/bin/cassandra -p $PIDFILE > /dev/null 2>&1"

    is_running && return 0

    for tries in `seq $WAIT_FOR_START`; do
        sleep 1
        is_running && return 0
    done

    return 2
}

# Returns
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop()
{
    is_running || return 1

    start-stop-daemon --stop \
        --pidfile $PIDFILE \
        --user $USER \
        --retry TERM/30/KILL/5

    is_running && return 2

    return 0
}

case "$1" in
    start)
        echo "Starting $DESC"
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        echo "Stopping $DESC"
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    restart|force-reload)
        echo "Restarting $DESC"
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
    status)
        is_running
        stat=$?
        case "$stat" in
            0) log_success_msg "$DESC is running" ;;
            *) log_success_msg "$DESC is not running" ;;
        esac
        exit "$stat"
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
        exit 3
        ;;
esac

:

# vi:ai sw=4 ts=4 tw=0 et
