#!/usr/bin/env bash
### BEGIN INIT INFO
# Provides:          kestrel
# Required-Start:    $remote_fs $network $named $time
# Required-Stop:     $remote_fs $network $named $time
# Should-Start:      ntp mdadm
# Should-Stop:       ntp mdadm
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: A message queue
# Description:       The Kestrel message queue
### END INIT INFO

# Source networking configuration
if [ -f /etc/sysconfig/network ]; then source /etc/sysconfig/network; fi

# Exit if networking is not up
[ "$NETWORKING" = "no" ] && exit

NAME=kestrel
KESTREL_USER="<%= node.kestrel.user %>"
KESTREL_HOME=`getent passwd kestrel | awk -F ':' '{ print $6; }'`

PID_FILE="$KESTREL_HOME/$NAME.pid"
LOG_FILE="/var/log/kestrel/kestrel.log"

FD_LIMIT=20000
WAIT_FOR_START=3

MAIN_CLASS="net.lag.kestrel.Kestrel"

# The first existing directory is used for JAVA_HOME if needed.
JVM_SEARCH_DIRS="/usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-sun /usr/lib/jvm/java-7-openjdk /usr/lib/jvm/java-7-oracle"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME


# If JAVA_HOME has not been set, try to determine it.
if [ -z "$JAVA_HOME" ]; then
    # If java is in PATH, use a JAVA_HOME that corresponds to that. This is
    # both consistent with how the upstream startup script works, and how
    # Debian works (read: the use of alternatives to set a system JVM).
    if [ -n "`which java`" ]; then
        java=`which java`
        # Dereference symlink(s)
        while true; do
            if [ -h "$java" ]; then
                java=`readlink "$java"`
                continue
            fi
            break
        done
        JAVA_HOME="`dirname $java`/../"
    # No JAVA_HOME set and no java found in PATH, search for a JVM.
    else
        for jdir in $JVM_SEARCH_DIRS; do
            if [ -x "$jdir/bin/java" ]; then
                JAVA_HOME="$jdir"
                break
            fi
        done
    fi
fi
JAVA="$JAVA_HOME/bin/java"



# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that returns the applications classpath
#
classpath()
{
    cp="$EXTRA_CLASSPATH"
    for j in <%= node.kestrel.installation_dir %>/*.jar; do
        [ "x$cp" = "x" ] && cp=$j || cp=$cp:$j
    done
    for j in <%= File.join(node.kestrel.installation_dir, "libs") %>/*.jar; do
        [ "x$cp" = "x" ] && cp=$j || cp=$cp:$j
    done
    for j in /usr/share/$NAME/*.jar; do
        [ "x$cp" = "x" ] && cp=$j || cp=$cp:$j
    done

    printf "$cp:$CONFDIR:/usr/share/java/commons-daemon.jar"
}


#
# Function that returns 0 if process is running, or nonzero if not.
#
# The nonzero value is 3 if the process is simply not running, and 1 if the
# process is not running but the pidfile exists (to match the exit codes for
# the "status" command; see LSB core spec 3.1, section 20.2)
#
CMD_PATT="kestrel.Kestrel"
is_running()
{
    if [ -f $PID_FILE ]; then
        pid=`cat $PID_FILE`
        grep -Eq "$CMD_PATT" "/proc/$pid/cmdline" 2>/dev/null && return 0
        return 1
    fi
    return 3
}


#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    is_running && return 1

    ulimit -l unlimited
    ulimit -n "$FD_LIMIT"

    CP=`classpath`
    cd $KESTREL_HOME

    CONFIG_FILE=<%= File.join(node.kestrel.config_dir, 'kestrel.scala') %>

    echo "Running Kestrel. Pid file: $PID_FILE"
    su $KESTREL_USER -c "nohup $JAVA -cp $CP $JVM_OPTS $MAIN_CLASS -f \"$CONFIG_FILE\" >\"$LOG_FILE\" 2>\"$LOG_FILE\" & echo \$! > $PID_FILE"

    is_running && return 0
    for tries in `seq $WAIT_FOR_START`; do
        sleep 1
        is_running && return 0
    done
    return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    is_running || return 1
    kill `cat $PID_FILE`
    sleep 1
    is_running && return 2 || (sudo rm $PID_FILE && return 0)
}

case "$1" in
  start)
        echo "Starting $DESC"
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  stop)
        echo "Stopping $DESC"
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  restart|force-reload)
        echo "Restarting $DESC"
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  status)
    is_running
    stat=$?
    case "$stat" in
      0) log_success_msg "$NAME is running" ;;
      1) log_failure_msg "could not access pidfile for $NAME" ;;
      *) log_success_msg "$NAME is not running" ;;
    esac
    exit "$stat"
    ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
        exit 3
        ;;
esac
